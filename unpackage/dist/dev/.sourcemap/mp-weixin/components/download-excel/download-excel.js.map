{"version":3,"sources":["webpack:///D:/桌面/onlineEducation1_admin/components/download-excel/download-excel.vue?2c86","webpack:///D:/桌面/onlineEducation1_admin/components/download-excel/download-excel.vue?576d","webpack:///D:/桌面/onlineEducation1_admin/components/download-excel/download-excel.vue?0198","webpack:///D:/桌面/onlineEducation1_admin/components/download-excel/download-excel.vue?7a58","uni-app:///components/download-excel/download-excel.vue"],"names":["name","props","type","default","data","required","fields","exportFields","defaultValue","header","footer","fetch","meta","worksheet","beforeGenerate","beforeFinish","escapeCsv","stringifyLongNum","computed","idName","downloadFields","methods","generate","json","export","blob","jsonToXLS","xlsData","_self","replace","jsonToCSV","csvData","escapedCSV","getProcessedJson","newItem","newData","getKeys","keys","parseExtraData","parseData","getValue","value","valueReformattedForMultilines","preprocessLongNum","getValueFromNestedItem","indexes","getValueFromCallback","parseValue","base64ToBlob","u8arr"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2H;AAC3H;AACkE;AACL;;;AAG7D;AACmK;AACnK,gBAAgB,6KAAU;AAC1B,EAAE,oFAAM;AACR,EAAE,yFAAM;AACR,EAAE,kGAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,6FAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACtBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAA2mB,CAAgB,wnBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;ACO/nB;AAAA;AAAA;AAAA;AAAA,gBAEA;EACAA;EACAC;IACA;IACAC;MACAA;MACAC;IACA;IACA;IACAC;MACAF;MACAG;MACAF;IACA;IACA;IACA;IACAG;MACAJ;MACAC;QAAA;MAAA;IACA;IACA;IACA;IACAI;MACAL;MACAC;QAAA;MAAA;IACA;IACA;IACAK;MACAN;MACAG;MACAF;IACA;IACA;IACAM;MACAN;IACA;IACA;IACAO;MACAP;IACA;IACA;IACAH;MACAE;MACAC;IACA;IACAQ;MACAT;IACA;IACAU;MACAV;MACAC;QAAA;MAAA;IACA;IACAU;MACAX;MACAC;IACA;IACA;IACAW;MACAZ;IACA;IACA;IACAa;MACAb;IACA;IACA;IACAc;MACAd;MACAC;IACA;IACA;IACAc;MACAf;MACAC;IACA;EACA;EACAe;IACA;IACAC;MACA;MACA;IACA;IAEAC;MACA;MAEA;IACA;EACA;EACAC;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACA;cAAA;gBAEAlB;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAAA;cAAA;gBAAA,MAEA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAIAmB;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA,iCAEA,aACA,uBACA,qCACA,YACA;cAAA;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA,iCACA,aACA,uBACA,oCACA,kBACA;cAAA;gBAAA,iCAEA,aACA,uBACA,YACA,2BACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IACA;AACA;AACA;IACAC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA;cAAA;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACA;MAAA;QAAA;MAAA;MAAA;IAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA,cACA;MACA;MACA;MACA;;MAEA;MACA;MACA;QACAC,+BACAlB,QACA,sDACA;MACA;;MAEA;MACAkB;MACA;QACAA;MACA;MACAA;MACAA;;MAEA;MACAA;MACAvB;QACAuB;QACA;UACAA,WACA,SACAC,wBACAA,gDACA,GACA;QACA;QACAD;MACA;MACAA;;MAEA;MACA;QACAA;QACAA,+BACA,aACA,sDACA;QACAA;MACA;MAEA,eACAE,6BACAA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;;MAEA;MACA;MACA;QACAC;MACA;;MAEA;MACA;QACAA;QACAA;MACA;MACAA;MACAA;MACA;MACA3B;QACA;UACA;UACA;UACA;UACA;YACA4B;YACA;cACAA;YACA;UACA;UACAD;UACAA;QACA;QACAA;QACAA;MACA;MACA;MACA;QACAA;MACA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACAE;MACA;MACA;MACA;MACA7B;QACA;QACA;UACA;UACA8B;QACA;QACAC;MACA;MAEA;IACA;IACAC;MACA;QACA;MACA;MAEA;MACA;QACAC;MACA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;QACA;UACA,kBACAC;QACA;MACA;QACAA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MAEA,8BACA,wBACAC,wDACAA;MAEA,oCACAA;MAEA;IACA;IAEA;AACA;AACA;IACAC;MACA,yEACA;IACA;IACAC;MACA;QACA;UACA;QACA;QACA;UACA;YACA;UACA;QACA;MACA;MACA;IACA;IACAC;MACA;MAAA,2CACAC;QAAA;MAAA;QAAA;UAAA;UACA;QACA;MAAA;QAAA;MAAA;QAAA;MAAA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IACAC;MACA,4DACAN,QACA;IACA;IACAO;MACA;MACA;MACA;MACA;MACA;QACAC;MACA;MACA;QAAA/C;MAAA;IACA;EACA;AACA;AAAA,4B","file":"components/download-excel/download-excel.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./download-excel.vue?vue&type=template&id=78ca2d04&\"\nvar renderjs\nimport script from \"./download-excel.vue?vue&type=script&lang=js&\"\nexport * from \"./download-excel.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"components/download-excel/download-excel.vue\"\nexport default component.exports","export * from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./download-excel.vue?vue&type=template&id=78ca2d04&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./download-excel.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./download-excel.vue?vue&type=script&lang=js&\"","<template>\r\n  <div :id=\"idName\" @click=\"generate\">\r\n    <slot> Download {{ name }} </slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport download from \"./download\";\r\n\r\nexport default {\r\n  name: \"downloadExcel\",\r\n  props: {\r\n    // mime type [xls, csv]\r\n    type: {\r\n      type: String,\r\n      default: \"xls\",\r\n    },\r\n    // Json to download\r\n    data: {\r\n      type: Array,\r\n      required: false,\r\n      default: null,\r\n    },\r\n    // fields inside the Json Object that you want to export\r\n    // if no given, all the properties in the Json are exported\r\n    fields: {\r\n      type: Object,\r\n      default: () => null,\r\n    },\r\n    // this prop is used to fix the problem with other components that use the\r\n    // variable fields, like vee-validate. exportFields works exactly like fields\r\n    exportFields: {\r\n      type: Object,\r\n      default: () => null,\r\n    },\r\n    // Use as fallback when the row has no field values\r\n    defaultValue: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\",\r\n    },\r\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\r\n    header: {\r\n      default: null,\r\n    },\r\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\r\n    footer: {\r\n      default: null,\r\n    },\r\n    // filename to export\r\n    name: {\r\n      type: String,\r\n      default: \"data.xls\",\r\n    },\r\n    fetch: {\r\n      type: Function,\r\n    },\r\n    meta: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    worksheet: {\r\n      type: String,\r\n      default: \"Sheet1\",\r\n    },\r\n    //event before generate was called\r\n    beforeGenerate: {\r\n      type: Function,\r\n    },\r\n    //event before download pops up\r\n    beforeFinish: {\r\n      type: Function,\r\n    },\r\n    // Determine if CSV Data should be escaped\r\n    escapeCsv: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    // long number stringify\r\n    stringifyLongNum: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    // unique identifier\r\n    idName() {\r\n      var now = new Date().getTime();\r\n      return \"export_\" + now;\r\n    },\r\n\r\n    downloadFields() {\r\n      if (this.fields) return this.fields;\r\n\r\n      if (this.exportFields) return this.exportFields;\r\n    },\r\n  },\r\n  methods: {\r\n    async generate() {\r\n      if (typeof this.beforeGenerate === \"function\") {\r\n        await this.beforeGenerate();\r\n      }\r\n      let data = this.data;\r\n      if (typeof this.fetch === \"function\" || !data) data = await this.fetch();\r\n\r\n      if (!data || !data.length) {\r\n        return;\r\n      }\r\n\r\n      let json = this.getProcessedJson(data, this.downloadFields);\r\n      if (this.type === \"html\") {\r\n        // this is mainly for testing\r\n        return this.export(\r\n          this.jsonToXLS(json),\r\n          this.name.replace(\".xls\", \".html\"),\r\n          \"text/html\"\r\n        );\r\n      } else if (this.type === \"csv\") {\r\n        return this.export(\r\n          this.jsonToCSV(json),\r\n          this.name.replace(\".xls\", \".csv\"),\r\n          \"application/csv\"\r\n        );\r\n      }\r\n      return this.export(\r\n        this.jsonToXLS(json),\r\n        this.name,\r\n        \"application/vnd.ms-excel\"\r\n      );\r\n    },\r\n    /*\r\n\t\tUse downloadjs to generate the download link\r\n\t\t*/\r\n    export: async function (data, filename, mime) {\r\n      let blob = this.base64ToBlob(data, mime);\r\n      if (typeof this.beforeFinish === \"function\") await this.beforeFinish();\r\n      download(blob, filename, mime);\r\n    },\r\n    /*\r\n\t\tjsonToXLS\r\n\t\t---------------\r\n\t\tTransform json data into an xml document with MS Excel format, sadly\r\n\t\tit shows a prompt when it opens, that is a default behavior for\r\n\t\tMicrosoft office and cannot be avoided. It's recommended to use CSV format instead.\r\n\t\t*/\r\n    jsonToXLS(data) {\r\n      let xlsTemp =\r\n        '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\r\n      let xlsData = \"<thead>\";\r\n      const colspan = Object.keys(data[0]).length;\r\n      let _self = this;\r\n\r\n      //Header\r\n      const header = this.header || this.$attrs.title;\r\n      if (header) {\r\n        xlsData += this.parseExtraData(\r\n          header,\r\n          '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\r\n        );\r\n      }\r\n\r\n      //Fields\r\n      xlsData += \"<tr>\";\r\n      for (let key in data[0]) {\r\n        xlsData += \"<th>\" + key + \"</th>\";\r\n      }\r\n      xlsData += \"</tr>\";\r\n      xlsData += \"</thead>\";\r\n\r\n      //Data\r\n      xlsData += \"<tbody>\";\r\n      data.map(function (item, index) {\r\n        xlsData += \"<tr>\";\r\n        for (let key in item) {\r\n          xlsData +=\r\n            \"<td>\" +\r\n            _self.preprocessLongNum(\r\n              _self.valueReformattedForMultilines(item[key])\r\n            ) +\r\n            \"</td>\";\r\n        }\r\n        xlsData += \"</tr>\";\r\n      });\r\n      xlsData += \"</tbody>\";\r\n\r\n      //Footer\r\n      if (this.footer != null) {\r\n        xlsData += \"<tfoot>\";\r\n        xlsData += this.parseExtraData(\r\n          this.footer,\r\n          '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\r\n        );\r\n        xlsData += \"</tfoot>\";\r\n      }\r\n\r\n      return xlsTemp\r\n        .replace(\"${table}\", xlsData)\r\n        .replace(\"${worksheet}\", this.worksheet);\r\n    },\r\n    /*\r\n\t\tjsonToCSV\r\n\t\t---------------\r\n\t\tTransform json data into an CSV file.\r\n\t\t*/\r\n    jsonToCSV(data) {\r\n      let _self = this;\r\n      var csvData = [];\r\n\r\n      //Header\r\n      const header = this.header || this.$attrs.title;\r\n      if (header) {\r\n        csvData.push(this.parseExtraData(header, \"${data}\\r\\n\"));\r\n      }\r\n\r\n      //Fields\r\n      for (let key in data[0]) {\r\n        csvData.push(key);\r\n        csvData.push(\",\");\r\n      }\r\n      csvData.pop();\r\n      csvData.push(\"\\r\\n\");\r\n      //Data\r\n      data.map(function (item) {\r\n        for (let key in item) {\r\n          let escapedCSV = item[key] + \"\";\r\n          // Escaped CSV data to string to avoid problems with numbers or other types of values\r\n          // this is controlled by the prop escapeCsv\r\n          if (_self.escapeCsv) {\r\n            escapedCSV = '=\"' + escapedCSV + '\"'; // cast Numbers to string\r\n            if (escapedCSV.match(/[,\"\\n]/)) {\r\n              escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\r\n            }\r\n          }\r\n          csvData.push(escapedCSV);\r\n          csvData.push(\",\");\r\n        }\r\n        csvData.pop();\r\n        csvData.push(\"\\r\\n\");\r\n      });\r\n      //Footer\r\n      if (this.footer != null) {\r\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\r\n      }\r\n      return csvData.join(\"\");\r\n    },\r\n    /*\r\n\t\tgetProcessedJson\r\n\t\t---------------\r\n\t\tGet only the data to export, if no fields are set return all the data\r\n\t\t*/\r\n    getProcessedJson(data, header) {\r\n      let keys = this.getKeys(data, header);\r\n      let newData = [];\r\n      let _self = this;\r\n      data.map(function (item, index) {\r\n        let newItem = {};\r\n        for (let label in keys) {\r\n          let property = keys[label];\r\n          newItem[label] = _self.getValue(property, item);\r\n        }\r\n        newData.push(newItem);\r\n      });\r\n\r\n      return newData;\r\n    },\r\n    getKeys(data, header) {\r\n      if (header) {\r\n        return header;\r\n      }\r\n\r\n      let keys = {};\r\n      for (let key in data[0]) {\r\n        keys[key] = key;\r\n      }\r\n      return keys;\r\n    },\r\n    /*\r\n\t\tparseExtraData\r\n\t\t---------------\r\n\t\tParse title and footer attribute to the csv format\r\n\t\t*/\r\n    parseExtraData(extraData, format) {\r\n      let parseData = \"\";\r\n      if (Array.isArray(extraData)) {\r\n        for (var i = 0; i < extraData.length; i++) {\r\n          if (extraData[i])\r\n            parseData += format.replace(\"${data}\", extraData[i]);\r\n        }\r\n      } else {\r\n        parseData += format.replace(\"${data}\", extraData);\r\n      }\r\n      return parseData;\r\n    },\r\n\r\n    getValue(key, item) {\r\n      const field = typeof key !== \"object\" ? key : key.field;\r\n      let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\r\n      let value = this.defaultValue;\r\n\r\n      if (!field) value = item;\r\n      else if (indexes.length > 1)\r\n        value = this.getValueFromNestedItem(item, indexes);\r\n      else value = this.parseValue(item[field]);\r\n\r\n      if (key.hasOwnProperty(\"callback\"))\r\n        value = this.getValueFromCallback(value, key.callback);\r\n\r\n      return value;\r\n    },\r\n\r\n    /*\r\n    convert values with newline \\n characters into <br/>\r\n    */\r\n    valueReformattedForMultilines(value) {\r\n      if (typeof value == \"string\") return value.replace(/\\n/gi, \"<br/>\");\r\n      else return value;\r\n    },\r\n    preprocessLongNum(value) {\r\n      if (this.stringifyLongNum) {\r\n        if (String(value).startsWith(\"0x\")) {\r\n          return value;\r\n        }\r\n        if (!isNaN(value) && value != \"\") {\r\n          if (value > 99999999999 || value < 0.0000000000001) {\r\n            return '=\"' + value + '\"';\r\n          }\r\n        }\r\n      }\r\n      return value;\r\n    },\r\n    getValueFromNestedItem(item, indexes) {\r\n      let nestedItem = item;\r\n      for (let index of indexes) {\r\n        if (nestedItem) nestedItem = nestedItem[index];\r\n      }\r\n      return this.parseValue(nestedItem);\r\n    },\r\n\r\n    getValueFromCallback(item, callback) {\r\n      if (typeof callback !== \"function\") return this.defaultValue;\r\n      const value = callback(item);\r\n      return this.parseValue(value);\r\n    },\r\n    parseValue(value) {\r\n      return value || value === 0 || typeof value === \"boolean\"\r\n        ? value\r\n        : this.defaultValue;\r\n    },\r\n    base64ToBlob(data, mime) {\r\n      let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\r\n      let bstr = atob(base64);\r\n      let n = bstr.length;\r\n      let u8arr = new Uint8ClampedArray(n);\r\n      while (n--) {\r\n        u8arr[n] = bstr.charCodeAt(n);\r\n      }\r\n      return new Blob([u8arr], { type: mime });\r\n    },\r\n  }, // end methods\r\n};\r\n</script>\r\n"],"sourceRoot":""}